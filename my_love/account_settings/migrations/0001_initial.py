# Generated by Django 3.0.5 on 2020-05-16 12:34

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0003_taggeditem_add_unique_index'),
        ('auth', '0011_update_proxy_permissions'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AboutCommonInfo',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('gender', models.IntegerField(choices=[(1, 'Other'), (2, 'Female'), (3, 'Mall')], default='1')),
                ('color_hair', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, choices=[('1', 'Other'), ('2', 'Brunette'), ('3', 'Red'), ('4', 'Brown'), ('5', 'Anything'), ('6', 'Blonde')], default='1', max_length=20, verbose_name='Color of hair'), size=None)),
                ('color_aye', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, choices=[('1', 'Other'), ('2', 'Blue'), ('3', 'Brown'), ('4', 'Gray'), ('5', 'Green'), ('6', 'Hazel'), ('7', 'Amber')], default='1', max_length=20, verbose_name='Color of aye'), size=None)),
            ],
        ),
        migrations.CreateModel(
            name='Countries',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('description', models.TextField(max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='Foods',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300, unique=True)),
                ('description', models.TextField(max_length=1000)),
                ('type', models.CharField(choices=[('1', 'animal'), ('2', 'vegetable'), ('3', 'organic')], max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Genres',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Hobbies',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300, unique=True)),
                ('description', models.TextField(max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='MusicType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
            ],
        ),
        migrations.CreateModel(
            name='Gallery',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(max_length=1000)),
                ('path', models.ImageField(default='images/default.png', upload_to='images/')),
                ('name', models.CharField(max_length=200)),
                ('main', models.BooleanField(default=False)),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gallery_set', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Films',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('genres', models.ManyToManyField(to='account_settings.Genres')),
            ],
        ),
        migrations.CreateModel(
            name='Books',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300, unique=True)),
                ('genres', models.ManyToManyField(to='account_settings.Genres')),
            ],
        ),
        migrations.CreateModel(
            name='AboutYou',
            fields=[
                ('aboutcommoninfo_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='account_settings.AboutCommonInfo')),
                ('min_age', models.IntegerField(null=True, verbose_name='Minimal age')),
                ('max_age', models.IntegerField(null=True, verbose_name='Maximum age')),
                ('min_growth', models.FloatField(null=True, verbose_name='Minimum growth')),
                ('max_growth', models.FloatField(null=True, verbose_name='Maximum growth')),
                ('min_weight', models.FloatField(null=True, verbose_name='Minimum weight')),
                ('max_weight', models.FloatField(null=True, verbose_name='Maximum weight')),
                ('books', models.ManyToManyField(blank=True, related_name='you_books_set', to='account_settings.Books', verbose_name='Favorite books?')),
                ('countries', models.ManyToManyField(related_name='you_countries_set', to='account_settings.Countries', verbose_name='Where is this person from?')),
                ('films', models.ManyToManyField(blank=True, related_name='you_films_set', to='account_settings.Films', verbose_name='What films?')),
                ('foods', models.ManyToManyField(blank=True, related_name='you_foods_set', to='account_settings.Foods', verbose_name='Foods')),
                ('genres', models.ManyToManyField(blank=True, related_name='you_genres_set', to='account_settings.Genres', verbose_name='What genres should this person love?')),
                ('hobbies', models.ManyToManyField(blank=True, related_name='you_hobbies_set', to='account_settings.Hobbies', verbose_name='Hobbies')),
                ('music_types', models.ManyToManyField(blank=True, related_name='you_music_types_set', to='account_settings.MusicType', verbose_name='What music?')),
            ],
            bases=('account_settings.aboutcommoninfo',),
        ),
        migrations.CreateModel(
            name='AboutMe',
            fields=[
                ('aboutcommoninfo_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='account_settings.AboutCommonInfo')),
                ('birthday', models.DateField(null=True, verbose_name='Your birthday')),
                ('name', models.CharField(help_text='100 characters max.', max_length=100, null=True)),
                ('surname', models.CharField(max_length=100, null=True)),
                ('growth', models.FloatField(null=True)),
                ('weight', models.FloatField(null=True)),
                ('books', models.ManyToManyField(blank=True, related_name='my_books_set', to='account_settings.Books', verbose_name='Favorite books')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='my_country_set', to='account_settings.Countries', verbose_name='Where are you from?')),
                ('films', models.ManyToManyField(blank=True, related_name='my_films_set', to='account_settings.Films', verbose_name='Favorite films')),
                ('foods', models.ManyToManyField(blank=True, related_name='my_foods_set', to='account_settings.Foods', verbose_name='Favorite foods')),
                ('genres', models.ManyToManyField(blank=True, related_name='my_genres_set', to='account_settings.Genres')),
                ('hobbies', models.ManyToManyField(blank=True, related_name='my_hobbies_set', to='account_settings.Hobbies', verbose_name='Favorite hobbies')),
                ('music_types', models.ManyToManyField(blank=True, related_name='my_music_types_set', to='account_settings.MusicType', verbose_name='Favorite types of music')),
            ],
            bases=('account_settings.aboutcommoninfo',),
        ),
    ]
